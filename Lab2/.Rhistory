colnames(data_frame) <- c("numeric", "complex")
data_frame
## Створити змінні базових (atomic) типів
int <- 1L
double <- 2.5
bool <- TRUE
char <- "a"
compl <- 1+1i
int
class(int)
double
class(double)
bool
class(bool)
char
class(char)
compl
class(compl)
## Створити вектори, які: містить послідовність з 5 до 75; містить числа 3.14,
## 2.71, 0, 13; 100 значень TRUE.
first <- c(5:75)
second <- c(3.14, 2.71, 0, 13)
third <- as.logical(c(1:100))
first
second
third
## Створити наступну матрицю за допомогою matrix, та за допомогою cbind або rbind
matrix_vector <- c(0.5, 3.9,0,2,1.3,131,2.2, 7,3.5,2.8,4.6,5.1)
first_matrix <- matrix(matrix_vector, ncol=3)
first_matrix
## method 2
first_row <- c(0.5, 1.3, 3.5)
second_row <- c(3.9,131,2.8)
third_row <- c(0,2.2,4.6)
fourth_row <- c(2,7,5.1)
second_matrix <- rbind(first_row,second_row,third_row,fourth_row)
second_matrix
## 4. Створити довільний список (list), в який включити всі базові типи.
lst <- list("a", TRUE, 5L, 1.3, 1i)
lst
## 5. Створити фактор з трьома рівнями «baby», «child», «adult».
fctr <- factor(levels = c("baby", "child", "adult"))
fctr
## 6. Знайти індекс першого значення NA в векторі 1, 2, 3, 4, NA, 6, 7, NA, 9, NA, 11. Знайти кількість значень NA.
vctr <- c(1, 2, 3, 4, NA, 6, 7, NA, 9, NA, 11)
na_first_position <- min(which(is.na(vctr)))
na_count <- sum(is.na(vctr))
na_first_position
na_count
## 7. Створити довільний data frame та вивести в консоль.
data_frame <- data.frame(first =(1:3), second=c(1i,2i,3i))
data_frame
## 8. Змінити імена стовпців цього data frame.
colnames(data_frame) <- c("numeric", "complex")
data_frame
## Створити змінні базових (atomic) типів
int <- 1L
double <- 2.5
bool <- TRUE
char <- "a"
compl <- 1+1i
int
class(int)
double
class(double)
bool
class(bool)
char
class(char)
compl
class(compl)
## Створити вектори, які: містить послідовність з 5 до 75; містить числа 3.14,
## 2.71, 0, 13; 100 значень TRUE.
first <- c(5:75)
second <- c(3.14, 2.71, 0, 13)
third <- as.logical(c(1:100))
first
second
third
## Створити наступну матрицю за допомогою matrix, та за допомогою cbind або rbind
matrix_vector <- c(0.5, 3.9,0,2,1.3,131,2.2, 7,3.5,2.8,4.6,5.1)
first_matrix <- matrix(matrix_vector, ncol=3)
first_matrix
## method 2
first_row <- c(0.5, 1.3, 3.5)
second_row <- c(3.9,131,2.8)
third_row <- c(0,2.2,4.6)
fourth_row <- c(2,7,5.1)
second_matrix <- rbind(first_row,second_row,third_row,fourth_row)
second_matrix
## 4. Створити довільний список (list), в який включити всі базові типи.
lst <- list("a", TRUE, 5L, 1.3, 1i)
lst
## 5. Створити фактор з трьома рівнями «baby», «child», «adult».
fctr <- factor(levels = c("baby", "child", "adult"))
fctr
## 6. Знайти індекс першого значення NA в векторі 1, 2, 3, 4, NA, 6, 7, NA, 9, NA, 11. Знайти кількість значень NA.
vctr <- c(1, 2, 3, 4, NA, 6, 7, NA, 9, NA, 11)
na_first_position <- min(which(is.na(vctr)))
na_count <- sum(is.na(vctr))
na_first_position
na_count
## 7. Створити довільний data frame та вивести в консоль.
data_frame <- data.frame(first =(1:3), second=c(1i,2i,3i))
data_frame
## 8. Змінити імена стовпців цього data frame.
colnames(data_frame) <- c("numeric", "complex")
data_frame
## Створити змінні базових (atomic) типів
int <- 1L
double <- 2.5
bool <- TRUE
char <- "a"
compl <- 1+1i
int
class(int)
double
class(double)
bool
class(bool)
char
class(char)
compl
class(compl)
## Створити вектори, які: містить послідовність з 5 до 75; містить числа 3.14,
## 2.71, 0, 13; 100 значень TRUE.
first <- c(5:75)
second <- c(3.14, 2.71, 0, 13)
third <- as.logical(c(1:100))
first
second
third
## Створити наступну матрицю за допомогою matrix, та за допомогою cbind або rbind
matrix_vector <- c(0.5, 3.9,0,2,1.3,131,2.2, 7,3.5,2.8,4.6,5.1)
first_matrix <- matrix(matrix_vector, ncol=3)
first_matrix
## method 2
first_row <- c(0.5, 1.3, 3.5)
second_row <- c(3.9,131,2.8)
third_row <- c(0,2.2,4.6)
fourth_row <- c(2,7,5.1)
second_matrix <- rbind(first_row,second_row,third_row,fourth_row)
second_matrix
## 4. Створити довільний список (list), в який включити всі базові типи.
lst <- list("a", TRUE, 5L, 1.3, 1i)
lst
## 5. Створити фактор з трьома рівнями «baby», «child», «adult».
fctr <- factor(levels = c("baby", "child", "adult"))
fctr
## 6. Знайти індекс першого значення NA в векторі 1, 2, 3, 4, NA, 6, 7, NA, 9, NA, 11. Знайти кількість значень NA.
vctr <- c(1, 2, 3, 4, NA, 6, 7, NA, 9, NA, 11)
na_first_position <- min(which(is.na(vctr)))
na_count <- sum(is.na(vctr))
na_first_position
na_count
## 7. Створити довільний data frame та вивести в консоль.
data_frame <- data.frame(first =(1:3), second=c(1i,2i,3i))
data_frame
## 8. Змінити імена стовпців цього data frame.
colnames(data_frame) <- c("numeric", "complex")
data_frame
install.packages("knitr")
knitr::stitch('Lab1.R')
knitr::stitch('C:/Users/v.yeshchenkov/Documents/RLabs/Lab1.R')
install.packages("tinytex")
knitr::stitch('C:/Users/v.yeshchenkov/Documents/RLabs/Lab1.R')
tinytex::install_tinytex()
knitr::stitch('C:/Users/v.yeshchenkov/Documents/RLabs/Lab1.R')
knitr::stitch('C:/Users/v.yeshchenkov/Documents/RLabs/Lab1.R')
yy
rmarkdown::render("C:/Users/v.yeshchenkov/Documents/RLabs/Lab1.R", "html_document")
rmarkdown::render("C:/Users/v.yeshchenkov/Documents/RLabs/Lab2.R", "html_document")
rmarkdown::render("C:/Users/v.yeshchenkov/Documents/RLabs/Lab3.R", "html_document")
rmarkdown::render("C:/Users/v.yeshchenkov/Documents/RLabs/Lab4.R", "html_document")
rmarkdown::render("C:/Users/v.yeshchenkov/Documents/RLabs/Lab5.R", "html_document")
rmarkdown::render("C:/Users/v.yeshchenkov/Documents/RLabs/Lab6.R", "html_document")
rmarkdown::render("C:/Users/v.yeshchenkov/Documents/RLabs/Lab1.R", "pdf_document")
rmarkdown::render("C:/Users/v.yeshchenkov/Documents/RLabs/Lab1.R", "github_document")
rmarkdown::render("C:/Users/v.yeshchenkov/Documents/RLabs/Lab1.R", "github_document")
rmarkdown::render("C:/Users/v.yeshchenkov/Documents/RLabs/Lab2.R", "github_document")
rmarkdown::render("C:/Users/v.yeshchenkov/Documents/RLabs/Lab3.R", "github_document")
rmarkdown::render("C:/Users/v.yeshchenkov/Documents/RLabs/Lab4.R", "github_document")
rmarkdown::render("C:/Users/v.yeshchenkov/Documents/RLabs/Lab5.R", "github_document")
rmarkdown::render("C:/Users/v.yeshchenkov/Documents/RLabs/Lab6.R", "github_document")
head(frame, 6);
head(d, 6);
d <- read.table('lab1.xls');
head(d, 6)
library("xlsx")
install.packages("xlsx")
d <- read.xlsx(tmp);
## Завдання 1
require("xlsx")
install.packages("readxl")
library("readxl")
d <- readxl(tmp);
## Завдання 1
library("readxl")
tmp = tempfile(fileext = ".xlsx");
## Завдання 1
library("readxl");
tmp = tempfile(fileext = ".xlsx");
download.file('https://data.gov.ua/dataset/53f5bb80-658c-4028-8caf-39fddda2e160/resource/f28a0ded-b210-4e3a-a4cf-ef87bdb4508a/download/reiestr_opublik_23_04_2020.xls', mode='wd', destfile = tmp);
tmp = tempfile(fileext = ".xls");
download.file('https://data.gov.ua/dataset/53f5bb80-658c-4028-8caf-39fddda2e160/resource/f28a0ded-b210-4e3a-a4cf-ef87bdb4508a/download/reiestr_opublik_23_04_2020.xls', mode='wd', destfile = tmp);
library("readxl");
tmp = tempfile(fileext = ".xls");
download.file('https://data.gov.ua/dataset/53f5bb80-658c-4028-8caf-39fddda2e160/resource/f28a0ded-b210-4e3a-a4cf-ef87bdb4508a/download/reiestr_opublik_23_04_2020.xls', mode='wd', destfile = tmp);
d <- readxl(tmp);
head(d, 6);
## Завдання 1
library("readxl");
tmp = tempfile(fileext = ".xls");
download.file('https://data.gov.ua/dataset/53f5bb80-658c-4028-8caf-39fddda2e160/resource/f28a0ded-b210-4e3a-a4cf-ef87bdb4508a/download/reiestr_opublik_23_04_2020.xls', mode='wd', destfile = tmp);
d <- readxl(tmp);
## Завдання 1
require("readxl");
tmp = tempfile(fileext = ".xls");
download.file('https://data.gov.ua/dataset/53f5bb80-658c-4028-8caf-39fddda2e160/resource/f28a0ded-b210-4e3a-a4cf-ef87bdb4508a/download/reiestr_opublik_23_04_2020.xls', mode='wd', destfile = tmp);
d <- readxl(tmp);
## Завдання 1
library("readxl");
tmp = tempfile(fileext = ".xls");
download.file('https://data.gov.ua/dataset/53f5bb80-658c-4028-8caf-39fddda2e160/resource/f28a0ded-b210-4e3a-a4cf-ef87bdb4508a/download/reiestr_opublik_23_04_2020.xls', mode='wd', destfile = tmp);
d <- readxl(tmp);
## Завдання 1
library("readxl");
tmp = tempfile(fileext = ".xls");
download.file('https://data.gov.ua/dataset/53f5bb80-658c-4028-8caf-39fddda2e160/resource/f28a0ded-b210-4e3a-a4cf-ef87bdb4508a/download/reiestr_opublik_23_04_2020.xls', mode='wd');
## Завдання 1
library("readxl")
tmp = tempfile(fileext = ".xls")
url <- 'https://data.gov.ua/dataset/53f5bb80-658c-4028-8caf-39fddda2e160/resource/f28a0ded-b210-4e3a-a4cf-ef87bdb4508a/download/reiestr_opublik_23_04_2020.xls'
download.file(url = url, mode='wd', destfile = tmp)
## Завдання 1
library("readxl")
temp <- paste0(tempfile(), ".xls")
url <- 'https://data.gov.ua/dataset/53f5bb80-658c-4028-8caf-39fddda2e160/resource/f28a0ded-b210-4e3a-a4cf-ef87bdb4508a/download/reiestr_opublik_23_04_2020.xls'
download.file(url = url, mode="wd", destfile = temp)
## Завдання 1
library("readxl")
temp <- paste0(tempfile(), ".xls")
url <- 'https://data.gov.ua/dataset/53f5bb80-658c-4028-8caf-39fddda2e160/resource/f28a0ded-b210-4e3a-a4cf-ef87bdb4508a/download/reiestr_opublik_23_04_2020.xls'
download.file(url = url, mode="wb", destfile = temp)
d <- readxl(tmp)
## Завдання 1
library("readxl")
temp <- paste0(tempfile(), ".xls")
url <- 'https://data.gov.ua/dataset/53f5bb80-658c-4028-8caf-39fddda2e160/resource/f28a0ded-b210-4e3a-a4cf-ef87bdb4508a/download/reiestr_opublik_23_04_2020.xls'
download.file(url = url, mode="wb", destfile = temp)
d <- read.table(temp)
## Завдання 1
library("readxl")
tmp = tempfile(fileext = ".xls")
url <- 'https://data.gov.ua/dataset/53f5bb80-658c-4028-8caf-39fddda2e160/resource/f28a0ded-b210-4e3a-a4cf-ef87bdb4508a/download/reiestr_opublik_23_04_2020.xls'
download.file(url = url, mode="wb", destfile = tmp)
d <- readxl(tmp)
## Завдання 1
library("readxl")
tmp = tempfile(fileext = ".xls")
url <- 'https://data.gov.ua/dataset/53f5bb80-658c-4028-8caf-39fddda2e160/resource/f28a0ded-b210-4e3a-a4cf-ef87bdb4508a/download/reiestr_opublik_23_04_2020.xls'
download.file(url = url, mode="wb", destfile = tmp)
d <- read_excel(tmp)
head(d, 6)
tmp = tempfile(fileext = ".xls")
url <- 'https://data.gov.ua/dataset/53f5bb80-658c-4028-8caf-39fddda2e160/resource/f28a0ded-b210-4e3a-a4cf-ef87bdb4508a/download/reiestr_opublik_23_04_2020.xls'
download.file(url = url, mode="wb", destfile = tmp)
d <- xlsx::read.xlsx2(tmp)
## Завдання 1
library("xlsx")
tmp = tempfile(fileext = ".xls")
url <- 'https://data.gov.ua/dataset/53f5bb80-658c-4028-8caf-39fddda2e160/resource/f28a0ded-b210-4e3a-a4cf-ef87bdb4508a/download/reiestr_opublik_23_04_2020.xls'
download.file(url = url, mode="wb", destfile = tmp)
d <- read.xlsx2(tmp)
## Завдання 1
library("readxl")
tmp = tempfile(fileext = ".xls")
url <- 'https://data.gov.ua/dataset/53f5bb80-658c-4028-8caf-39fddda2e160/resource/f28a0ded-b210-4e3a-a4cf-ef87bdb4508a/download/reiestr_opublik_23_04_2020.xls'
download.file(url = url, mode="wb", destfile = tmp)
d <- read_excel(tmp)
## Завдання 1
library("readxl")
tmp = tempfile(fileext = ".xls")
url <- 'https://data.gov.ua/dataset/175386f8-fbce-4352-8ec9-44fc8c436aa9/resource/e58e005a-c448-4d97-9d45-813f05b1d737/download/nabir-2020-2022-roki.xls'
download.file(url = url, mode="wb", destfile = tmp)
d <- read_excel(tmp)
head(d, 6)
d
d <- read_excel(tmp,1)
head(d, 6)
head(d)
library("cli")
d <- as.data.frame(d)
head(d)
d <- read_excel(tmp,1,col_names = TRUE)
d <- as.data.frame(d)
head(d)
d <- as.data.frame(d)
head(d, 6)
## Завдання 2
csvTmp <- tempfile()
csvurl <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv'
download.file(csvurl, destfile = csvTmp)
csvFrame <- read.csv(csvTmp)
head(csvFrame)
colnames(csvFrame)
csvFrame <- read.csv(csvTmp)
nrow(which(csvFrame$VAL = 24))
nrow(which(csvFrame$VAL == 24))
nrow(which(csvFrame$VAL == '24'))
which(csvFrame$VAL == 24)
length(which(csvFrame$VAL == 24))
## Завдання 3
require(XML)
install.packages(XML)
install.packages("XML")
## Завдання 3
require(XML)
## Завдання 3
require(XML)
xmltmp <- tempfile()
xmlurl <- 'http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml'
download.file(xmlurl, xmltmp)
data <- xmlParse(xmltmp)
xmlframe <- xmlToDataFrame(data)
colnames(xmlframe)
xmlframe <- xmlToList(data)
head(xmlframe)
length(which(xmlList$row$row$zipcode == '21231'))
xmlList <- xmlToList(data)
length(which(xmlList$row$row$zipcode == '21231'))
length(which(xmlList$row$row$zipcode == '21224'))
length(which(xmlList$row$zipcode == '21224'))
length(xmlList)
parsedList <- c(xmlList$row)
length(which(parsedList$row$zipcode == '21224'))
length(parsedList)
head(parsedList)
which(parsedList$row$zipcode == 21218)
which(parsedList$row$zipcode == "21218")
length(which(parsedList$row$zipcode %in% '21224'))
which(parsedList$row$zipcode %in% '21224')
parsedList <- c(xmlList$row)
View(parsedList)
parsedList <- c(xmlList$row$row["zipcode" == '21224'])
length(parsedList)
parsedList <- c(xmlList$row$row["zipcode" == 21224])
parsedList <- c(xmlList$row$row["zipcode" == 21224])
length(parsedList)
View(parsedList)
View(parsedList)
xmlList <- xmlToList(data)
sum(xmlList$row$row$zipcode == "21218")
download.file(xmlurl, xmltmp)
data <- xmlTreeParse(xmltmp)
rootnode <- xmlRoot(data)
sum(xpathSApply(rootnode,"//zipcode",xmlValue) == 21231)
View(rootnode)
zipcode<-xpathSApply(rootNode,"//zipcode",xmlValue)
zipcode<-xpathSApply(rootnode,"//zipcode",xmlValue)
data <- xmlTreeParse(xmltmp, useInternalNodes = TRUE )
rootnode <- xmlRoot(data)
zipcode<-xpathSApply(rootnode,"//zipcode",xmlValue)
sum(zipcode == 21231)
## Завдання 1
library("readxl")
tmp = tempfile(fileext = ".xls")
url <- 'https://data.gov.ua/dataset/175386f8-fbce-4352-8ec9-44fc8c436aa9/resource/e58e005a-c448-4d97-9d45-813f05b1d737/download/nabir-2020-2022-roki.xls'
download.file(url = url, mode="wb", destfile = tmp)
d <- read_excel(tmp,1,col_names = TRUE)
d <- as.data.frame(d)
head(d, 6)
## Завдання 2
csvTmp <- tempfile()
csvurl <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv'
download.file(csvurl, destfile = csvTmp)
csvFrame <- read.csv(csvTmp)
length(which(csvFrame$VAL == 24))
## Завдання 3
require(XML)
xmltmp <- tempfile()
xmlurl <- 'http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml'
download.file(xmlurl, xmltmp)
data <- xmlTreeParse(xmltmp, useInternalNodes = TRUE )
rootnode <- xmlRoot(data)
zipcode<-xpathSApply(rootnode,"//zipcode",xmlValue)
sum(zipcode == 21231)
## 1. Завантажте файл з даними за посиланням
filetmp <- tempfile()
download.file(url="https://dcc.ligo.org/public/0146/P1700337/001/H-H1_LOSC_C00_4_V1-1187006834-4096.hdf5", destfile = filetmp, mode="wb")
## 2. Встановить в R пакет для роботи з HDF5 файлами.
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
source("http://bioconductor.org/biocLite.R")
install.packages("BiocManager")
BiocManager::install("rhdf5")
library("rhdf5")
h5ls(filetmp)
## 4. Зчитайте результати вимірів. Для цього зчитайте name Strain з групи strain
## в змінну strain. Після зчитування не забувайте закривати файл командою
## H5Close().
strain <- h5read(filetmp, "strain/Strain")
H5close()
## 5.Також з «strain/Strain» зчитайте атрибут (функція h5readAttributes)
## Xspacing в змінну st та виведіть її. Це інтервал часу між вимірами.
st <- h5readAttributes("data.hdf5", "/strain/Strain")$Xspacing
## 5.Також з «strain/Strain» зчитайте атрибут (функція h5readAttributes)
## Xspacing в змінну st та виведіть її. Це інтервал часу між вимірами.
st <- h5readAttributes(filetmp, "/strain/Strain")$Xspacing
st
## 6. Знайдіть час початку події та її тривалість. Для цього з групи meta зчитайте
## в змінну gpsStart name GPSstart та в змінну duration name Duration.
gpsStart <- h5read(filetmp, "meta/GPSstart")
duration <- h5read(filetmp, "meta/Duration")
gpsEnd <- gpsStart + duration
myTime <- c(gpsStart, gpsEnd, st)
myTime
myTime <- seq(gpsStart, gpsEnd, st)
myTime
myTime <- c(gpsStart, gpsEnd, st)
myTime <- seq(gpsStart, gpsEnd, st)
plot(myTime[0:numSamples],
strain[0:numSamples], type = "l", xlab = "GPS Time (s)", ylab = "H1 Strain")
numSamples <- 1000000
plot(myTime[0:numSamples],
strain[0:numSamples], type = "l", xlab = "GPS Time (s)", ylab = "H1 Strain")
## Зчитування html сторінки
url <- read_html("http://www.imdb.com/search/title?count=100&release_date=2017,2017&title_type=feature")
## Зчитування html сторінки
url <- "http://www.imdb.com/search/title?count=100&release_date=2017,2017&title_type=feature"
html <- html_nodes(url,'.text-primary')
## Зчитування html сторінки
library("rvest")
install.packages("rvest")
## Зчитування html сторінки
library("rvest")
html <- html_nodes(url,'.text-primary')
library("xml2")
url <- "http://www.imdb.com/search/title?count=100&release_date=2017,2017&title_type=feature"
html <- html_nodes(url,'.text-primary')
htmlpage <- read_html("http://www.imdb.com/search/title?count=100&release_date=2017,2017&title_type=feature")
html <- html_nodes(htmlpage,'.text-primary')
data <- as.numeric(html_text(html))
data
title_html <- html_nodes(url,'.lister-item-header a')
## Зчитування html сторінки
library("rvest")
htmlpage <- read_html("http://www.imdb.com/search/title?count=100&release_date=2017,2017&title_type=feature")
html <- html_nodes(htmlpage,'.text-primary')
rank <- as.numeric(html_text(html))
title_html <- html_nodes(url,'.lister-item-header a')
title_html <- html_nodes(htmlpage,'.lister-item-header a')
title <- html_text(title_html)
runtime_html <- html_nodes(htmlpage,'.text-muted .runtime')
runtime <- html_text(runtime_html)
head(runtime)
runtime <- as.numeric(gsub(" min", "", runtime))
head(runtime)
movies <- data.frame(Rank = rank, Title = title, Runtime = runtime, stringsAsFactors = FALSE )
head(movies$Title)
movies[movies$Runtime > 120, ]$Title
sum(length(movies[movies$Runtime < 100, ]))
sum(length(movies[movies$Runtime < 100, ]$Title))
length(movies[movies$Runtime < 100, ]$Title)
length(movies[movies$Runtime < 100, ])
movies[movies$Runtime < 100, ]
sum(movies[movies$Runtime < 100, ])
length(which(movies$Runtime < 100))
sum(which(movies$Runtime < 100))
length(which(movies$Runtime < 100))
length(movies[movies$Runtime < 100])
length(movies$Runtime[movies$Runtime < 100])
length(which(movies$Runtime < 100))
install.packages("RSQLite")
library("RSQLite")
library("RSQLite")
conn <- dbConnect(SQLite(), "https://www.dropbox.com/s/pf2htfcrdoqh3ii/database.sqlite?dl=0")
conn <- dbConnect(SQLite(), "database.sqlite")
firstRes <- dbSendQuery(conn, "SELECT Title, EventType FROM Papers WHERE EventType='Spotlight' Order By Title")
- dbSendQuery(conn, "SELECT * FROM Authors ORDER BY Name")
firstResFetched <- dbFetch(firstRes, 10)
firstRes <- dbSendQuery(conn, "SELECT Title, EventType FROM Papers WHERE EventType='Spotlight' Order By Title")
firstResFetched <- dbFetch(firstRes, 10)
dbDisconnect(conn)
dbClearResult(firstRes)
dbDisconnect(conn)
library("RSQLite")
conn <- dbConnect(SQLite(), "database.sqlite")
firstRes <- dbSendQuery(conn, "SELECT Title, EventType FROM Papers WHERE EventType='Spotlight' Order By Title")
firstResFetched <- dbFetch(firstRes, 10)
dbClearResult(firstRes)
firstResFetched
secondRes <- dbSendQuery(conn, "SELECT Title, Name FROM Papers JOIN PaperAuthors ON Papers.Id = PaperId JOIN Authors On AuthorId = Authors.Id WHERE Name='Josh Tenenbaum' Order By Title")
secondResFetched <- dbFetch(secondRes, 10)
dbClearResult(secondRes)
secondResFetched
thirdRes <- dbSendQuery(conn, "SELECT Title FROM Papers WHERE Title LIKE '%statistical%' Order By Title")
thirdResFetched <- dbFetch(thirdRes, 10)
dbClearResult(thirdRes)
thirdResFetched
fourthRes <- dbSendQuery(conn, "SELECT Name, count(*) as NumPapers FROM Authors JOIN PaperAuthors ON Authors.id = AuthorId GROUP BY Name Order By NumPapers DESC")
fourthResFetched <- dbFetch(fourthRes, 10)
dbClearResult(fourthRes)
fourthResFetched
dbDisconnect(conn)
rmarkdown::render("C:/Users/v.yeshchenkov/Documents/Big data/Lab1/Lab1.R", "github_document")
rmarkdown::render("C:/Users/v.yeshchenkov/Documents/Big data/Lab2/Lab2.R", "github_document")
install.packages("BiocManager")
rmarkdown::render("C:/Users/v.yeshchenkov/Documents/Big data/Lab3/Lab3.R", "github_document")
rmarkdown::render("C:/Users/v.yeshchenkov/Documents/Big data/Lab1/Lab1.R", "github_document")
rmarkdown::render("C:/Users/v.yeshchenkov/Documents/Big data/Lab2/Lab2.R", "github_document")
